#macro( board $node )
class ApplicationGen {
protected:
#foreach( $child in $NodeTemplateUtils.getChildren($node.nodeUri) )
	#callMacroWithSuffix( $child "_declaration" )
#end

#foreach( $child in $NodeTemplateUtils.getChildren($node.nodeUri) )
#@indent()
	#callMacroWithSuffix( $child "_handlers" )
#end
#end
public:
	virtual ~ApplicationGen() { }

	virtual void setup() {
#foreach( $child in $NodeTemplateUtils.getChildren($node.nodeUri) )
#@indent()
		#callMacroWithSuffix( $child "_init" )
#end

#end
#foreach( $child in $NodeTemplateUtils.getChildren($node.nodeUri) )
#@indent()
		#callMacroWithSuffix( $child "_addListeners" )
#end
#end
	}
	
	virtual void loop() {
#foreach( $child in $NodeTemplateUtils.getChildren($node.nodeUri) )
#@indent()
		#callMacroWithSuffix( $child "_loop" )
#end
#end
	}
	
	void printStateAsJson(Print* print) {
		print->print(F("{"));
	
#foreach( $child in $NodeTemplateUtils.getChildren($node.nodeUri) )
#if ( ${child.properties.contributesToState} )
		${child.properties.name}.printStateAsJson(F("${child.properties.name}"), print);
		print->print(F(","));
#end
#end

		print->print(F("\"FREE_MEM\": "));
		print->print(freeRam());
		print->print(F("}"));
	}

};

#end
