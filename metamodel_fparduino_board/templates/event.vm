################################
## Standard event
################################

#macro ( standardEvent_common $node )
#set( $instanceName = "${instance.properties.name}" )
#set( $instanceType = "${NodeTemplateUtils.stripDynamicPrefix(${instance.type})}" )
#set( $simpleType = "${NodeTemplateUtils.stripDynamicPrefix(\${node.type})}" )
#set( $eventType = "${CommonsStringUtils.substringBetween(${simpleType}, '(', ')')}" )
#set( $eventName = "${CommonsStringUtils.substringBefore(${simpleType}, '(')}" )
#end

#macro ( default_handler $node )
#standardEvent_common()
virtual void ${instanceName}_${eventName}(Event* event) {
	$eventType* castedEvent = ($eventType*) event;
#foreach( $invocation in $NodeTemplateUtils.getChildren($node.nodeUri) )
#set( $targetMethodNode = $NodeTemplateUtils.getNode($invocation.properties.target) )
#set( $targetInstance = $NodeTemplateUtils.getParent($targetMethodNode.nodeUri).properties.name )
#set( $targetMethod = $CommonsStringUtils.substringBefore($targetMethodNode.properties.name, '(') )
#set( $targetMethodFull = $targetMethodNode.properties.name )
#@indent()
	#evaluate( ${NodeTemplateUtils.callMacroWithSuffix(${invocation.properties.template}, "", "")} )## we don't use directly, to have the special chars replaced
#end
#end
}
#end

#macro ( default_addListener $node )
#standardEvent_common()
${instanceName}.${eventName} = new DelegatingListener<ApplicationGen>(this, &ApplicationGen::${instanceName}_${eventName});
#end
